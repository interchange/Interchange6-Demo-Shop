#! /usr/bin/env perl

use strict;
use warnings;

package Fixtures;
use Moo;
with 'Interchange6::Test::Role::Fixtures';

has 'ic6s_schema' => ( is => 'ro', );

package main;
use Dancer ':script';
use Dancer::Plugin::Interchange6;
use Fixtures;

set logger        => 'console';
set logger_format => '%m';

my $public = setting('public');
debug $public;

my $schema = shop_schema;
$schema->deploy( { add_drop_table => 1 } );

my $fixtures = Fixtures->new( { ic6s_schema => $schema } );
$fixtures->load_all_fixtures;

my @navs = (
    {
        uri      => 'contact-us',
        type     => 'nav',
        scope    => 'top-left',
        name     => 'Contact Us',
        priority => 200,
        template => 'contact-us',
    },
    {
        uri      => 'orders',
        type     => 'nav',
        scope    => 'top-left',
        name     => 'Order Tracking',
        priority => 180,
    },
    {
        uri      => 'ship-to',
        type     => 'nav',
        scope    => 'top-right',
        name     => 'Ship To',
        priority => 100,
    },
    {
        uri      => 'language',
        type     => 'nav',
        scope    => 'top-right',
        name     => 'Language',
        priority => 200,
    },
    {
        uri => 'privacy',
        type => 'nav',
        scope => 'footer',
        name => 'Privacy Policy',
        priority => 200,
        template => 'privacy',
    },
    {
        uri => 'terms',
        type => 'nav',
        scope => 'footer',
        name => 'Terms and Conditions',
        priority => 180,
        template => 'terms',
    },
    {
        uri => 'returns',
        type => 'nav',
        scope => 'footer',
        name => 'Return Orders',
        priority => 160,
        template => 'privacy',
    },
    {
        uri => 'gift-certificates',
        type => 'nav',
        scope => 'footer',
        name => 'Gift Certificates',
        priority => 140,
        template => 'gift-certificates',
    },
);

# align media with actual images and add navigation
$schema->txn_do(
    sub {
        $fixtures->clear_media;

        my $imagetype =
          $schema->resultset('MediaType')->create( { type => 'image' } );

        my $products = shop_product;
        while ( my $product = $products->next ) {

            my $sku = $product->canonical_sku || $product->sku;

            my $img = "$sku.gif";

            my $path = path( $public, "img", "products", $img );

            if ( -r $path ) {
                $product->add_to_media(
                    {
                        file       => $path,
                        uri        => "/img/products/$img",
                        mime_type  => 'image/gif',
                        media_type => { type => 'image' },
                    }
                );
            }
        }

        foreach my $nav ( @navs ) {
            my $template = delete $nav->{template};
            my $result = shop_navigation->create($nav);
            $result->add_attribute('template', $template) if $template;
        }
    }
);
